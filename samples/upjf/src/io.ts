import * as serialization from '../../../src/serialization.js';
import {IssuerParamsJWK} from '../../../src/upjf.js';

export interface IssuerParamsJWKS {
    keys: IssuerParamsJWK[]
}

// initial token request from client (Prover)
export interface TokenRequestMessage {
    n: number
}

// first issuance message from Issuer
export interface FirstIssuanceMessage {
    sID: string,
    TI: string,
    msg: serialization.FirstIssuanceMessageJSON
}

// second issuance message from client (Prover)
export interface SecondIssuanceMessage {
    sID: string,
    msg: serialization.SecondIssuanceMessageJSON
}

// third issuance message from Issuer
export interface ThirdIssuanceMessage {
    sID: string,
    msg: serialization.ThirdIssuanceMessageJSON
}

// the presentation message consists of a verifier UID, a nonce, and a timestamp. It is
// non-interactively generated by the prover in this sample
export interface PresentationMessage {
    vID: string, // verifier UID
    nce: string, // nonce, random value
    ts: string // timestamp, in ms
}

export function parsePresentationMessage(pm: Uint8Array): PresentationMessage {
    const presentationMessage = JSON.parse(Buffer.from(pm).toString()) as PresentationMessage;
    return presentationMessage;
}

export function encodePresentationMessage(pm: PresentationMessage): Uint8Array {
    return Buffer.from(JSON.stringify(pm));
}

// presentation
export interface Presentation {
    upt?: serialization.UProveTokenJSON,
    uidt?: string,
    pm: string, // base64-encoded presentation message
    pp: serialization.PresentationProofJSON
}

